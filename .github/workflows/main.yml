name: Deploy to Netcup

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test || true  # true hinzugef√ºgt falls noch keine Tests existieren

  build:
    name: Build Application
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build
        env:
          VITE_APP_ENV: production
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_EMAIL_SERVICE: ${{ secrets.VITE_EMAIL_SERVICE }}
          VITE_GOOGLE_ANALYTICS_ID: ${{ secrets.VITE_GOOGLE_ANALYTICS_ID }}
          VITE_CALENDLY_URL: ${{ secrets.VITE_CALENDLY_URL }}

      - name: Generate robots.txt
        run: |
          echo "User-agent: *" > dist/robots.txt
          echo "Allow: /" >> dist/robots.txt
          echo "Sitemap: https://roketx.de/sitemap.xml" >> dist/robots.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  deploy:
    name: Deploy to Netcup
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Nur auf dem main Branch deployen
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: List output files
        run: ls -la dist

      - name: Deploy to Netcup FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: ./dist/
          server-dir: ${{ secrets.FTP_SERVER_DIR }}/
          dangerous-clean-slate: true

      - name: Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üöÄ Deployment erfolgreich abgeschlossen!"
          else
            echo "‚ùå Deployment fehlgeschlagen!"
            exit 1
          fi